/* List Module */
Head -> ls => ls[0]
Head -> ls (= []) => :none
Tail -> ls => (splice: ls, 1, -1)
Tail -> ls (<= 1) => []

Search -> ls target => (search': (search: ls, target))
search' -> ls => (Head: ls)
search' -> ls (= []) => :none
search -> ls target => {x y | x <- ls, y => target, (x = y) | index}

Searchls -> ls target => { x t | x <- ls, t => target, (x = t) | index }

/* Legacy */
SearchLeg -> list target => (foreach: ([target] ++ list), :searchleg)
searchleg -> elem index array result => result
searchleg -> elem index (> 0) array result (= :none) => (if: (elem = (Head: array)), (index - 1), :none)
searchleg -> elem index (= 0) array result => :none

for -> ls start end f => { x fun | x <- (splice: ls, (start - 1), end), fun => f, (:true = :true) | (call: fun, [x]) }

Length -> ls => (len: ls)
Length -> ls (= []) => 0

qsort -> ls | a => ([x | xs] => ls) => ((qsort: {Y X | Y <- xs, X => x, (Y < X)}) ++ x ++ (qsort: {Y X | Y <- xs, X => x, (Y >= X)}))
qsort -> ls (= []) => []
qsort -> ls (= 1) => ls
qsort -> ls (= 2) => (if: (ls[0] > ls[1]), [ls[1], ls[0]], ls)

Reverse -> ls | x => ([head | tail] => ls) => ((Reverse: tail) ++ head)
Reverse -> ls (= 1) => ls
Reverse -> ls (= 2) => [ls[1], ls[0]]

Shift -> ls | x => ([head | tail] => ls) => (tail ++ head)

Index -> ls i => ls[i]

Last -> ls => (Index: ls, ((len: ls) - 1))
Last -> ls (= []) => :none

Join -> ls => (foreachspec: ls, :Join', "")
Join' -> elem index list result => (result + elem)
Join' -> elem index (= 0) list result => elem