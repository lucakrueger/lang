module: Maths

import: [Trig]

/* Sets */
/* @autodoc
    @module Maths
    @name Set
    @description Check if a set is valid
    @arg ls List
    @returns true false
*/
set -> ls => (identical: ls)

/* Functions */
/* @autodoc
    @module Maths
    @name sum
    @description Goes over range and sums all results by function
    @arg j Starting number
    @arg n Ending number
    @arg f Function takes elem index array result
    @returns number
*/
sum -> j n f => (sum: (foreachls: (range: j, (n+2)), f))

/* @autodoc
    @module Maths
    @name sumls
    @description Goes over a list and sums all values
    @arg ls A list
    @returns number
*/
sum -> ls => (foreachspec: ls, :sumHelper, 0)
sumHelper -> elem index array result => (elem + result)

/* @autodoc
    @module Maths
    @name product
    @description Goes over range and multiplies all results by function
    @arg j Starting number
    @arg n Ending number
    @arg f Function takes elem index array result
    @returns number
*/
product -> j n f => (product: (foreachls: (range: j, (n+1)), f))

/* @autodoc
    @module Maths
    @name Prodcutls
    @description Goes over a list and multiplies all values
    @arg ls A list
    @returns number
*/
product -> ls => (foreachspec: ls, :productHelper, 1)
productHelper -> elem index array result => (elem * result)

/* Complex Numbers */
Complex -> real imag => [:complex, real, imag]
Real -> complex (head :complex) => complex[1]
Imaginary -> complex (head :complex) => complex[2]

sqrt -> x => (x root 2)

factorial -> n => (Product: (1..n))

limit -> a min max | x => (if: (a < min), min, a) => (if: (x > max), max, x) => x